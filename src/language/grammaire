// automatically generated by Xtext
grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

import "http://www.example.org/ase" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Program returns Program:
	{Program}
	'Program'
	'{'
		('function' '{' function+=Function ( "," function+=Function)* '}' )?
	'}';


Statement returns Statement:
	Forward | Backward | TurnRight | TurnLeft | Loop | Condition | FunctionCall | SetSpeed | GetSpeed | VariableCall | Constant | getDistance | getTimeStamp;

Expression returns Expression:
	FunctionCall | GetSpeed | VariableCall | Constant | getDistance | getTimeStamp;


Function returns Function:
	{Function}
	'Function'
	'{'
		('statement' '(' statement+=[Statement|EString] ( "," statement+=[Statement|EString])* ')' )?
	'}';

Forward returns Forward:
	'Forward'
	'{'
		('unit' unit=Unit)?
		'function' function=[Function|EString]
		'expression' expression=Expression
	'}';

Backward returns Backward:
	'Backward'
	'{'
		('unit' unit=Unit)?
		'function' function=[Function|EString]
		'expression' expression=Expression
	'}';

TurnRight returns TurnRight:
	'TurnRight'
	'{'
		'function' function=[Function|EString]
		'expression' expression=Expression
	'}';

TurnLeft returns TurnLeft:
	'TurnLeft'
	'{'
		'function' function=[Function|EString]
		'expression' expression=Expression
	'}';

Loop returns Loop:
	'Loop'
	'{'
		'function' function=[Function|EString]
		'booleanexpression' booleanexpression=BooleanExpression
		'repeat' '{' repeat+=Statement ( "," repeat+=Statement)* '}' 
	'}';

Condition returns Condition:
	'Condition'
	'{'
		'function' function=[Function|EString]
		'booleanexpression' booleanexpression=BooleanExpression
		'conditionIf' conditionIf=Statement
		('conditionElse' conditionElse=Statement)?
	'}';

FunctionCall returns FunctionCall:
	'FunctionCall'
	'{'
		'function' function=[Function|EString]
		('expression' '(' expression+=[Expression|EString] ( "," expression+=[Expression|EString])* ')' )?
	'}';

SetSpeed returns SetSpeed:
	'SetSpeed'
	'{'
		'function' function=[Function|EString]
	'}';

GetSpeed returns GetSpeed:
	'GetSpeed'
	'{'
		'function' function=[Function|EString]
		('expression' '(' expression+=[Expression|EString] ( "," expression+=[Expression|EString])* ')' )?
	'}';

VariableCall returns VariableCall:
	'VariableCall'
	'{'
		'function' function=[Function|EString]
		('expression' '(' expression+=[Expression|EString] ( "," expression+=[Expression|EString])* ')' )?
	'}';

Constant returns Constant:
	'Constant'
	'{'
		'function' function=[Function|EString]
		('expression' '(' expression+=[Expression|EString] ( "," expression+=[Expression|EString])* ')' )?
	'}';

getDistance returns getDistance:
	'getDistance'
	'{'
		'function' function=[Function|EString]
		('expression' '(' expression+=[Expression|EString] ( "," expression+=[Expression|EString])* ')' )?
	'}';

getTimeStamp returns getTimeStamp:
	'getTimeStamp'
	'{'
		'function' function=[Function|EString]
		('expression' '(' expression+=[Expression|EString] ( "," expression+=[Expression|EString])* ')' )?
	'}';

enum Unit returns Unit:
				mm = 'mm' | cm = 'cm' | m = 'm';

And returns And:
	{And}
	'And'
	;

Or returns Or:
	{Or}
	'Or'
	;

Nom returns Nom:
	{Nom}
	'Nom'
	;

Type returns Type:
	{Type}
	'Type'
	;

Addition returns Addition:
	{Addition}
	'Addition'
	;

Substration returns Substration:
	{Substration}
	'Substration'
	;

Multiplication returns Multiplication:
	{Multiplication}
	'Multiplication'
	;

Division returns Division:
	{Division}
	'Division'
	;
